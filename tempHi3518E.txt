


== 海思SDK资料包说明 ================================================

链接：http://pan.baidu.com/s/1nv0iX6L
密码：q2qm
压缩文件的解压密码：qddytt


开发使用的相关工具：
./HI3518EV200+AR0130+16M/工具


海思SDK官方文档：
./HI3518EV200+AR0130+16M/海思SDK

Ubuntu10.04开发环境：虚拟机可用环境，需要安装VMware
./HI3518EV200+AR0130+16M/HI3518EV200-AR0130-16M flash.7z


Hi3518E开发板的功能测试说明文档：
./HI3518EV200+AR0130+16M/HI3518EV200+AR0130+16M flash 板子测试文档.rar


Hi3518E开发板资料包：linux源码、编译说明、各种配置等
./HI3518EV200+AR0130+16M/hi3518ev200+ar0130+16m单独资料包.7z

VMware Fusion mac(虚拟机软件) v8.5.0 简体中文版：
下载：
http://www.xp510.com/mac/32308.html
破解码：
FY7N2-6RGD2-081XZ-UYWQC-ZPKCA


== 开发板资料包相关说明 ================================================
./HI3518EV200+AR0130+16M/hi3518ev200+ar0130+16m单独资料包/hi3518

arm-hisiv300-linux：arm-linux交叉编译工具，用于在新的Ubuntu环境下，安装海思的交叉编译器。
linux-3.4.y：linux内核编译目录。
mpp：存放媒体处理平台的目录，包里面是视频编码的例子及测试方法
nfs：NFS服务器相关目录
rootfs：rootfs文件系统编译目录
rtl8188：wifi模块驱动源码，编译驱动命令
tftpboot：编译好的rootfs-ar0130.jffs2及uImage


== 安装海思的交叉编译器 ================================================
PS: 提供的虚拟机里面已经安装好了海思提供的交叉编译器，不需要再安装了。

如果是自己的开发环境，安装步骤如下：
cd arm-hisiv300-linux
./cross.v300.install


== 编译 ================================================

-- 编译内核 ------------------------------------------------
cd ./linux-3.0.y
./mk3518.sh

PS: mk3518.sh 脚本里面包含了编译linux内核所需的所有的命令，具体看mk3518.sh文件，编译成功将生成在目录arch/arm/boot/uImage文件，这个就是要烧录到板子上的

-- 制作rootfs文件系统 ------------------------------------------------
./mkfs.jffs2 -d ./rootfs -l -e 0x10000 -o rootfs-ar0130.jffs2

PS: 生成的rootfs-ar0130.jffs2这个就是要烧录到板子上的内核文件


== 往板子烧录固件 ================================================
地址空间说明
        |     256K   |      1792K    |      14336K           |
        |------------|---------------|-----------------------|
        |    boot    |     kernel    |     rootfs            |



烧录流程：
1.将uImage、rootfs-ar0130.jffs2放到tftp服务器目录
2.启动TFTPSvr.exe，保证tftp服务器目录指向uImage、rootfs-ar0130.jffs2所在目录
3.连接设备：插入USB、网线。
4.启动SecureCRT，连接设备，并保持SecureCRT为激活界面。
5.按住crtl+c，为板子上电，进入uboot
6.修改板子的IP、网关等：192.168.2.247为windows的tftp服务器IP，192.168.2.99为板子指定的IP
  set serverip 192.168.2.247		// windows的tftp服务器IP  set ipaddr 192.168.2.99 		// 为板子指定的IP  set ethaddr xx:xx:xx:xx:xx:xx	// 不用管  set netmask 255.255.255.0  set gatewayip 192.168.2.1		// 网关地址
7.烧写内核程序：
  mw.b 0x82000000 0xFF 0x1C0000
  tftp 0x82000000 uImage
  sf probe 0
  sf erase 0x40000 0x1C0000
  sf write 0x82000000 0x40000 0x1C0000
8.烧写rootfs文件系统：
  mw.b 0x82000000 0xFF 0xE00000
  tftp 0x82000000 rootfs-ar0130.jffs2
  sf probe 0
  sf erase 0x200000 0xE00000
  sf write 0x82000000 0x200000 0xE00000
9.设置启动参数和启动命令：
  setenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:256K(boot),1792K(kernel),14336K(rootfs)';setenv bootcmd 'sf probe 0;sf read 0x82000000 0x40000 0x1C0000;bootm 0x82000000';saveenv;reset


-- 以下为资料整理 ------------------------------------------------
板子上电时按住crtl+c，进入uboot里面烧写内核、rootfs这些

-- uboot里面烧写内核 ------------------------------------------------
set serverip 192.168.1.199;mw.b 0x82000000 0xFF 0x1C0000;tftp 0x82000000 uImage;sf probe 0;sf erase 0x40000 0x1C0000;sf write 0x82000000 0x40000 0x1C0000

set serverip 192.168.1.199;   		// 设置NFS?/tftp?服务器IP
mw.b 0x82000000 0xFF 0x1C0000;		// 将内存地址0x82000000开始大小为0x1C0000的区域设置为0xFF
tftp 0x82000000 uImage;  		// 从主机的tftp目录中下载uImage到0x82000000这个地址。编译出来的uImage内核文件，精简后的linux内核为1.7M大小
sf probe 0;				// 挂载
sf erase 0x40000 0x1C0000;		// 擦除
sf write 0x82000000 0x40000 0x1C0000	// 烧写

-- 烧写rootfs文件系统 ------------------------------------------------
mw.b 0x82000000 0xFF 0xE00000;tftp 0x82000000 rootfs-ar0130.jffs2;sf probe 0;sf erase 0x200000 0xE00000;sf write 0x82000000 0x200000 0xE00000

mw.b 0x82000000 0xFF 0xE00000;
tftp 0x82000000 rootfs-ar0130.jffs2;	// 根文件系统，里边包含了基本的驱动
sf probe 0;
sf erase 0x200000 0xE00000;
sf write 0x82000000 0x200000 0xE00000


-- 设置启动参数和启动命令 ------------------------------------------------
setenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:256K(boot),1792K(kernel),14336K(rootfs)';setenv bootcmd 'sf probe 0;sf read 0x82000000 0x40000 0x1C0000;bootm 0x82000000';saveenv;reset

setenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:256K(boot),1792K(kernel),14336K(rootfs)';
setenv bootcmd 'sf probe 0;sf read 0x82000000 0x40000 0x1C0000;bootm 0x82000000';
saveenv;
reset

== 测试摄像头的视频录制功能 ================================================
1.准备工具及环境：
    VLC播放器、TFTPSvr.exe、SecureCRT
    第一次测试的话需要USB转串口(CH340G)驱动（USB转串口-CH340G.EXE）

2.使用SecureCRT连接设备：
    1）摄像头板子上电：插上USB，端口应该是COM3，电源和网线先不用插。
    2）启动SecureCRT：Protocol选择Serial，Port应该是COM3（取决于实际端口），波特率为115200，数据位8位，校验位无，停止位1位，勾选Save session，其余复选框都不选。
    3）点击连接，此时SecureCRT应该没什么信息。
    4）插上摄像头电源及网线，此时SecureCRT应该可以看到板子的启动信息。
3.启动TFTPSvr.exe，并设置服务目录。
4.将视频编码示例程序sample_venc放到TFTP服务目录下
5.在SecureCRT中输入如下命令：
  PS：IP地址192.168.1.100是windows的IP地址，需要改成实际的windows的IP地址
    1）mount tmpfs /tmp -t tmpfs –o size=4m	// 设置文件传输临时目录tmp
    2）cd /tmp		// 进入临时目录
    3）tftp -g -r sample_venc 192.168.1.100	// 从windows下载视频编码示例程序sample_venc到tmp    4）chmod +x sample_venc		// 修改sample_venc用户权限    5）./sample_venc 0			// 启动sample_venc
    6）出现“please input choose rc mode!”后，输入c，回车    7）出现“please press twice ENTER to exit this sample”后，等待约10秒左右，按两次回车结束运行。
    8）查看生成的h264视频文件(ls -l)，可以看到摄像头拍摄的三个不同屏幕尺寸的.h264视频文件
    9）将视频文件传回windows：tftp -p -l stream_chn0.h264 192.168.1.100
    10）使用vlc即可查看这些视频文件。

注意：
1.需要让摄像头板子的IP地址，跟windows在同一个网段，可以用ifconfig在板子启动后设置一下，如：
ifconfig eth0 192.168.2.99 netmask 255.255.255.0
route add default gw 192.168.2.1


== 测试摄像头的流视频播放功能 ================================================
1.使用SecureCRT连接设备（参考“测试摄像头的视频录制功能”）
2.在SecureCRT中输入“rtsp”，启动rtsp服务。
3.打开VLC，设置流播放地址：File-Open Network
4.在Network的URL中输入“rtsp://192.168.2.99/test.264”，IP地址为摄像头板子的实际IP地址
5.点击Open，即可看到摄像头传回来的视频数据了。


== linux命令 ================================================

-- 修改IP及网关（只能临时生效，重启后无效） ------------------------------------------------
设置IP和掩码：
ifconfig eth0 192.168.2.99 netmask 255.255.255.0

设置网关：
route add default gw 192.168.2.1


== 板子个性化定制信息 ================================================

1.主机名称：“qddytt”改为“hicgege”
linux-3.4.y/include/generated/compile.h:5:#define LINUX_COMPILE_HOST "qddytt"

2.欢迎信息：“Welcome to HiLinux”改为“Welcome to GJH Linux”
rootfs/etc/profile:32:echo "${GREEN}Welcome to HiLinux.${NORMAL}"

3.ssid：“qddytt”改为“HICGEGE”
rootfs/etc/hostapd.conf:5:ssid=qddytt
rootfs/etc/wpa.conf:4:ssid="qddytt"

4.wpa_passphrase：“qddytt11”改为“123456789”
rootfs/etc/hostapd.conf:8:wpa_passphrase=qddytt11

5.默认IP：“192.168.1.10”改为“192.168.2.99”
rootfs/etc/init.d/rcS:22:ifconfig eth0 192.168.1.10
改为：
ifconfig eth0 192.168.2.99 netmask 255.255.255.0
route add default gw 192.168.2.1

--  ------------------------------------------------

grep -rn "Welcome to HiLinux" *
rootfs/etc/profile:32:echo "${GREEN}Welcome to HiLinux.${NORMAL}"


grep -rn "System startup" *
linux-3.4.y/arch/arm/mach-at91/leds.c:139:	case led_start:		/* System startup */
linux-3.4.y/arch/arm/mach-ks8695/leds.c:49:	case led_start:		/* System startup */


grep -rn "192.168.1.10" *
linux-3.4.y/arch/arm/boot/dts/pxa168-aspenite.dts:18:		bootargs = "console=ttyS0,115200 root=/dev/nfs nfsroot=192.168.1.100:/nfsroot/ ip=192.168.1.101:192.168.1.100::255.255.255.0::eth0:on";
linux-3.4.y/arch/arm/configs/mmp2_defconfig:19:CONFIG_CMDLINE="root=/dev/nfs rootfstype=nfs nfsroot=192.168.1.100:/nfsroot/ ip=192.168.1.101:192.168.1.100::255.255.255.0::eth0:on console=ttyS2,38400 mem=128M user_debug=255"
linux-3.4.y/arch/arm/configs/pxa3xx_defconfig:18:CONFIG_CMDLINE="root=/dev/nfs rootfstype=nfs nfsroot=192.168.1.100:/nfsroot/ ip=192.168.1.101:192.168.1.100::255.255.255.0::eth0:on console=ttyS0,115200 mem=64M debug"
linux-3.4.y/Documentation/networking/bonding.txt:1494:force all traffic bound to 192.168.1.100 to use eth1 in the bond as its output
linux-3.4.y/Documentation/networking/bonding.txt:1500:	192.168.1.100 action skbedit queue_mapping 2
linux-3.4.y/Documentation/networking/bonding.txt:1504:ip of 192.168.1.100 have their output queue mapping value overwritten to 2.
linux-3.4.y/fs/cifs/connect.c:2156:			"unc=//192.168.1.100/public) specified");
linux-3.4.y/sound/pci/asihpi/hpi.h:382:For 192.168.1.101
rootfs/etc/init.d/rcS:22:ifconfig eth0 192.168.1.10


grep -rn "qddytt" *
linux-3.4.y/include/generated/compile.h:5:#define LINUX_COMPILE_HOST "qddytt"
linux-3.4.y/mk3518.sh:2:cp hi3518ev200_qddytt .config
Binary file rootfs/bin/gpio.ko matches
rootfs/etc/hostapd.conf:5:ssid=qddytt
rootfs/etc/hostapd.conf:8:wpa_passphrase=qddytt11
rootfs/etc/wpa.conf:4:ssid="qddytt"
Binary file rootfs/usr/lib/qddytt/gpio.ko matches
Binary file rootfs-ar0130.jffs2 matches
Binary file tftpboot/rootfs-ar0130.jffs2 matches
wifi使用说明.txt:13:默认的热点名字：qddytt
wifi使用说明.txt:14:密码：qddytt11

grep -rn "https://hisisdk.taobao.com" *
Binary file rootfs/bin/gpio.ko matches
Binary file rootfs/usr/lib/qddytt/gpio.ko matches


grep -rn "Your input Sensor type is" *
mpp/ko/load3518e:246:	echo "==== Your input Sensor type is $SNS_TYPE ===="
mpp/ko/load3518e:255:	echo "==== Your input Sensor type is $SNS_TYPE ===="
mpp/ko/load3518ev201:213:	echo "==== Your input Sensor type is $SNS_TYPE ===="
mpp/ko/load3518ev201:222:	echo "==== Your input Sensor type is $SNS_TYPE ===="
rootfs/ko/load3518e:246:	echo "==== Your input Sensor type is $SNS_TYPE ===="
rootfs/ko/load3518e:255:	echo "==== Your input Sensor type is $SNS_TYPE ===="
rootfs/ko/load3518ev201:213:	echo "==== Your input Sensor type is $SNS_TYPE ===="
rootfs/ko/load3518ev201:222:	echo "==== Your input Sensor type is $SNS_TYPE ===="

grep -rn "None of nfsroot found in cmdline." *
rootfs/usr/sbin/nfsroot:20:	echo "None of nfsroot found in cmdline."









==  ================================================

--  ------------------------------------------------




== temp ================================================

--  ------------------------------------------------


















